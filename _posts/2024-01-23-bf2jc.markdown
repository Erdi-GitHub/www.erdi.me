---
layout: post
title:  "BF to Java Compiler!"
date:   2024-01-23 14:39:01 +0100
categories: projects
---

# BOO!
Sorry to spook ya, I didn't make a post on Halloween so this is my way of making up for it.  
  
On the note of holidays though, happy belated New Year's and merry Christmas to you that celebrate it! I've brought you all a present I think you'll enjoy.  
  
I've always seen [Brainfuck](https://en.wikipedia.org/wiki/Brainfuck) as a fun language to mess around with ever since I found out about it circa 2020.  
My favorite programming language is Java.  
  
Do you see where this is going?  
  
THAT'S RIGHT! My belated gift to you is bringing the fun of those languages together!  
Don't act surprised. You've read the title.  
  

## BF2JC
Yup! A Brainfuck to Java transpiler!  
You might have a few questions, I'll give you the courtesy of answering them before you even ask them. After all, why tire your jaw during festiviti-...! Well, a month after festivities. Regardless.  
  
### Questions and Answers!
* What the hell is a transpiler?  

A source-to-source translator, source-to-source compiler (S2S compiler), transcompiler, or transpiler is a type of translator that takes the source code of a program written in a programming language as its input and produces an equivalent source code in the same or a different programming language.  
[Says Wikipedia.](https://en.wikipedia.org/wiki/Source-to-source_compiler)  
That's all just fancy nerd lingo for an app that takes some code in a language and translates that son of a gun to another language. That's the definition I'm using.  

* What's Brainfuck?  

An esoteric programming language made by the genius that is Urban MÃ¼ller. It only consists of eight (8) operators! That is, increment (+) ; decrement (-) ; pointer-increment (>) ; pointer-decrement (<) ; print (.) ; read (,) ; aaaand the while-not-zero opening and closing brackets ([])  
If you want a more complete story of BF, check out [Wikipedia](https://en.wikipedia.org/wiki/Brainfuck).  

* Why? Just, why? Why have you made this? Are you okay?  

No.  

* Where can I find the source for this?  

GitHub, over at [Erdi-GitHub/BF2JC](https://github.com/Erdi-GitHub/BF2JC)!
  
## Examples
Moving on! Let us see some BF alongside the equivalent Java code generated by my beautifully and meticulously crafted month-late present!  
  

Let's start with a classic.
### Hello World  
In BF, that'd be:
```brainfuck
[
    Taken from Wikipedia: https://en.wikipedia.org/wiki/Brainfuck
]

++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop until Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop until Cell #0 is zero; number of iterations is 8

The result of this is:
Cell no :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
```
The above compiles in just 3 milliseconds on my machine:
```bash
$ java -jar BF2JC-1.0.0-SNAPSHOT.jar -i in.bf -o HelloWorld.java
Transpiled in 3.344252ms!
```
Let's see the output, shall we?  
The following is HelloWorld.java:
```java
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;

public class HelloWorld {
	public static void main(String[] args) throws IOException {
		List<Byte> data = new ArrayList<>();
		data.add((byte) 0);
		int pos = 0;

		data.set(pos, (byte) (data.get(pos) + 8));
		while(data.get(pos) != 0) {
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 4));
			while(data.get(pos) != 0) {
				pos += 1; while(pos >= data.size()) data.add((byte) 0);
				data.set(pos, (byte) (data.get(pos) + 2));
				pos += 1; while(pos >= data.size()) data.add((byte) 0);
				data.set(pos, (byte) (data.get(pos) + 3));
				pos += 1; while(pos >= data.size()) data.add((byte) 0);
				data.set(pos, (byte) (data.get(pos) + 3));
				pos += 1; while(pos >= data.size()) data.add((byte) 0);
				data.set(pos, (byte) (data.get(pos) + 1));
				pos -= 4;
				data.set(pos, (byte) (data.get(pos) - 1));
			}
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 1));
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 1));
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) - 1));
			pos += 2; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 1));
			while(data.get(pos) != 0) {
				pos -= 1;
			}
			pos -= 1;
			data.set(pos, (byte) (data.get(pos) - 1));
		}
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		System.out.print((char)(byte) data.get(pos));
		pos += 1; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 3));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 7));
		System.out.print((char)(byte) data.get(pos));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 3));
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		System.out.print((char)(byte) data.get(pos));
		pos -= 1;
		data.set(pos, (byte) (data.get(pos) - 1));
		System.out.print((char)(byte) data.get(pos));
		pos -= 1;
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 3));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 6));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 8));
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 1));
		System.out.print((char)(byte) data.get(pos));
		pos += 1; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 2));
		System.out.print((char)(byte) data.get(pos));
		System.out.print((char)(byte) data.get(pos));
	}
}
```
As you can see, there are _some_ optimisations made during compilation, but it should generally have the same functionality so that's whatever.  
Naturally, it doesn't take a long time to compile: 
```bash
$ time javac HelloWorld.java

real	0m0.715s
user	0m1.595s
sys	0m0.087s
```
Let's run it!
```bash
$ time java HelloWorld
Hello World!

real	0m0.045s
user	0m0.015s
sys	0m0.032s
```

Marvelous. Scrumptious. Moving on!

### Fibonacci Sequence
The following program (although minified) prints out the Fibonacci sequence!
```brainfuck
++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>++++++++.>+.+++++++++++++++++.-----------------.+++++++++++++.<<++.>>-----------.++++++++.-..-------------.<<.>>++++++.++.+++++++++++++.-----------------.<<.>>++++++++++++++++++++.----------.++++++.<<.>>.-----.<<<.>>.>-----------.+++++++++++++++++.-----------------.+++++++++++++.<<.>>-----------.++++++++.-..-------------.<<.>>+++++++++++.-------.+++++++++++++++.<<.>>+++++.----------.++++++.<<.>>-----------------.+++++++++++.++++++++.---------.<<<.>>.>---------.+++++++++++++++++.-----------------.+++++++++++++.<<.>>-----------.++++++++.-..-------------.<<.>>+++++++++++++++++.+++.-------.<<.>>-------------.+++++++++++++++++.---.++++++.-------.----------.<<.>>---.+++++++++++++.----------.<<.>>.+.++++++++++++++.--------------.+++++++++++++.++.<<.>>+++++.----------.++++++.<<<.
```
In Java this is more than 200 lines long and takes 5ms to transpile!
```java
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;

public class Fib {
	public static void main(String[] args) throws IOException {
		List<Byte> data = new ArrayList<>();
		data.add((byte) 0);
		int pos = 0;

		data.set(pos, (byte) (data.get(pos) + 10));
		while(data.get(pos) != 0) {
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 1));
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 3));
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 7));
			pos += 1; while(pos >= data.size()) data.add((byte) 0);
			data.set(pos, (byte) (data.get(pos) + 10));
			pos -= 4;
			data.set(pos, (byte) (data.get(pos) - 1));
		}
		pos += 3; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 8));
		System.out.print((char)(byte) data.get(pos));
		pos += 1; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 1));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 13));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		data.set(pos, (byte) (data.get(pos) + 2));
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 11));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 8));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 1));
		System.out.print((char)(byte) data.get(pos));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 13));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 6));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 2));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 13));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 17));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 20));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 10));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 6));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 5));
		System.out.print((char)(byte) data.get(pos));
		pos -= 3;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		System.out.print((char)(byte) data.get(pos));
		pos += 1; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 11));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 13));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 11));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 8));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 1));
		System.out.print((char)(byte) data.get(pos));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 13));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 11));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 7));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 15));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 5));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 10));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 6));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 11));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 8));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 9));
		System.out.print((char)(byte) data.get(pos));
		pos -= 3;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		System.out.print((char)(byte) data.get(pos));
		pos += 1; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 9));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 13));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 11));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 8));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 1));
		System.out.print((char)(byte) data.get(pos));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 13));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 3));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 7));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 13));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 17));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 3));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 6));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 7));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 10));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) - 3));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 13));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 10));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 1));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 14));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 14));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 13));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 2));
		System.out.print((char)(byte) data.get(pos));
		pos -= 2;
		System.out.print((char)(byte) data.get(pos));
		pos += 2; while(pos >= data.size()) data.add((byte) 0);
		data.set(pos, (byte) (data.get(pos) + 5));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) - 10));
		System.out.print((char)(byte) data.get(pos));
		data.set(pos, (byte) (data.get(pos) + 6));
		System.out.print((char)(byte) data.get(pos));
		pos -= 3;
		System.out.print((char)(byte) data.get(pos));
		System.out.print((char)(byte) data.get(pos));
	}
}
```
Compiling this, running it, all that, gives us..
```
$ java Fib
1
1
2
3
5
8
13
21
```
Fun! Huge shoutout to [Astronomical Richard](https://youtu.be/xvFZjo5PgG0) for writing this, I wouldn't have been able to figure it out myself.  
  
## Conclusion
There isn't one. There is no moral here. There is no rhyme or reason to it. My only objective was transpiling Brainfuck to Java and now my life is complete.  
With that said, enjoy your gift, Bob! (I don't know your name, just imagine it's Bob.)